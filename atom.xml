<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sanks的博客</title>
  
  <subtitle>知识付诸行动才有转换为能力的效果</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.sanks-blog.com/"/>
  <updated>2021-11-05T14:17:28.677Z</updated>
  <id>https://www.sanks-blog.com/</id>
  
  <author>
    <name>sanks</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>requestAnimationFrame解决传统定时器的BUG</title>
    <link href="https://www.sanks-blog.com/requestAnimationFrame/"/>
    <id>https://www.sanks-blog.com/requestAnimationFrame/</id>
    <published>2021-11-07T03:05:45.000Z</published>
    <updated>2021-11-05T14:17:28.677Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;/div&gt;
&lt;blockquote&gt;&lt;p&gt;当你写一个倒计时组件时，可能会出现的解决方案是应用 setInterval来做的。&lt;br&gt;我摘取网上的setInterval的实例代码，测试一下这个倒计时的误差。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;span class=&quot;sanks-keywords&quot;&gt;读者的疑问：一个倒计时组件，需要做的这么精准吗？&lt;/span&gt;&lt;br&gt;我的回答：这要看你对性能的要求是否是精益求精了，本着对计时精度的严格要求，尽量缩小倒计时误差，减小手机浏览器的内存消耗等很有必要；最重要的是，为以后的购物“秒杀”做准备，此组件扩展成“秒杀组件”是很简单的事。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="React" scheme="https://www.sanks-blog.com/categories/React/"/>
    
    
      <category term="React" scheme="https://www.sanks-blog.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>程序员的自我修养</title>
    <link href="https://www.sanks-blog.com/The-interview-experience/"/>
    <id>https://www.sanks-blog.com/The-interview-experience/</id>
    <published>2020-12-27T13:41:55.000Z</published>
    <updated>2021-11-04T23:21:00.929Z</updated>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="随笔" scheme="https://www.sanks-blog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.sanks-blog.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>如何使js进入休眠或等待</title>
    <link href="https://www.sanks-blog.com/javascript-go-sleep-to-wait-next-execute/"/>
    <id>https://www.sanks-blog.com/javascript-go-sleep-to-wait-next-execute/</id>
    <published>2020-08-22T01:32:38.000Z</published>
    <updated>2020-08-22T02:08:38.751Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;在做react的转场动画时，偶然想得一个解决方案中，需要拦截 React-router4 中 Prompt 的操作时，想让进程休眠，来执行转场动画，遗憾的是没有成功，但是意外获得了新技能 - javascript的休眠方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;如何编写sleep函数&quot;&gt;&lt;a href=&quot;#如何编写sleep函数&quot; class=&quot;headerlink&quot; title=&quot;如何编写sleep函数&quot;&gt;&lt;/a&gt;如何编写sleep函数&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;不卖关子了，直接上代码，不过需要你自己去验证，&lt;span class=&quot;sanks-keywords&quot;&gt;正所谓授之以鱼不如授之以渔&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.sanks-blog.com/categories/JavaScript/"/>
    
      <category term="ES6" scheme="https://www.sanks-blog.com/categories/JavaScript/ES6/"/>
    
    
      <category term="ES6" scheme="https://www.sanks-blog.com/tags/ES6/"/>
    
      <category term="JavaScript" scheme="https://www.sanks-blog.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端框架设计及技术预研</title>
    <link href="https://www.sanks-blog.com/front-end-framework/"/>
    <id>https://www.sanks-blog.com/front-end-framework/</id>
    <published>2020-06-25T11:38:37.000Z</published>
    <updated>2020-08-22T02:08:38.750Z</updated>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;h2 id=&quot;权限拓展&quot;&gt;&lt;a href=&quot;#权限拓展&quot; class=&quot;headerlink&quot; title=&quot;权限拓展&quot;&gt;&lt;/a&gt;权限拓展&lt;/h2&gt;&lt;/div&gt;
&lt;blockquote&gt;&lt;p&gt;针对以往的权限控制职能到达页面及按钮级别，结合nodeJS中间件（路由代理），做出了延伸到接口的权限控制，概要图如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/front-end-framework/permission.jpg&quot; alt=&quot;permission structure chart&quot; title=&quot;权限控制结构图&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Framework" scheme="https://www.sanks-blog.com/categories/Framework/"/>
    
    
      <category term="Framework" scheme="https://www.sanks-blog.com/tags/Framework/"/>
    
  </entry>
  
  <entry>
    <title>通过例子解释防抖动和节流</title>
    <link href="https://www.sanks-blog.com/debounce-and-throttle/"/>
    <id>https://www.sanks-blog.com/debounce-and-throttle/</id>
    <published>2020-05-20T15:40:45.000Z</published>
    <updated>2020-07-29T11:46:25.270Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;译文说明&quot;&gt;&lt;a href=&quot;#译文说明&quot; class=&quot;headerlink&quot; title=&quot;译文说明&quot;&gt;&lt;/a&gt;译文说明&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;作者：David Corbacho&lt;br&gt;原文链接：&lt;a href=&quot;https://css-tricks.com/debouncing-throttling-explained-examples/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://css-tricks.com/debouncing-throttling-explained-examples/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-style: italic&quot;&gt;以下是伦敦前端工程师 &lt;a href=&quot;https://twitter.com/dcorbacho&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;David Corbacho&lt;/a&gt; 的客座文章。我们已经&lt;a href=&quot;https://css-tricks.com/the-difference-between-throttling-and-debouncing/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;之前讨论过这个主题&lt;/a&gt;，但是这次，David将通过交互式演示来讲解这些概念，使事情变得非常清楚。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-weight: bolder&quot;&gt;Debounce&lt;/span&gt; 和 &lt;span style=&quot;font-weight: bolder&quot;&gt;throttle&lt;/span&gt; 是两种类似(但不同的!)的技术，用于控制我们允许一个函数在一段时间内执行多少次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;在将函数附加到DOM事件时，具有函数的防抖动或节流的版本尤其有用。为什么呢?因为我们在事件和函数的执行之间给了自己一个控制层。请记住，我们不控制这些DOM事件的发出频率。它可以变化。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.sanks-blog.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.sanks-blog.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>connected React Router</title>
    <link href="https://www.sanks-blog.com/connected-React-Router/"/>
    <id>https://www.sanks-blog.com/connected-React-Router/</id>
    <published>2020-05-06T02:16:42.000Z</published>
    <updated>2020-07-29T13:43:17.861Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;最近在使用 Connnected React  Router 发现神奇的问题，居然没办法正常控制路由，身为专业的工程师，我们发挥福尔摩斯的精神，抽丝剥茧的找出问题出在哪。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是-Connected-React-Router&quot;&gt;&lt;a href=&quot;#什么是-Connected-React-Router&quot; class=&quot;headerlink&quot; title=&quot;什么是 Connected React Router&quot;&gt;&lt;/a&gt;什么是 Connected React Router&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;如果你使用Redux，那么在 Redux 中使用 Side Effect Handler（像是 Redux Thunk、Redux Observable 或是 Redux Saga）做「流程管理」的时候，那么你一定会有一种情境是&lt;/p&gt;
&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;如果你做完某件事，把目前页面跳转到另一个页面&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;如果你也使用 React Router，那么 Connected React Router 就是帮你在 Redux 的流程中也可以使用 Router 的功能，（像是 push、 goBack … etc 之类的 Api 帮助你管理路由）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;也就是说，Connected React Router 是帮助同步「Router」与「Redux」的状态，帮助你可以使用 Redux 管理 React Router 的工具！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Redux" scheme="https://www.sanks-blog.com/categories/Redux/"/>
    
    
      <category term="Redux" scheme="https://www.sanks-blog.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>前端感悟</title>
    <link href="https://www.sanks-blog.com/front-end-comprehension/"/>
    <id>https://www.sanks-blog.com/front-end-comprehension/</id>
    <published>2020-04-16T12:11:40.000Z</published>
    <updated>2020-12-27T14:08:34.494Z</updated>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="随笔" scheme="https://www.sanks-blog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.sanks-blog.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>http request timeout</title>
    <link href="https://www.sanks-blog.com/http-request-timeout/"/>
    <id>https://www.sanks-blog.com/http-request-timeout/</id>
    <published>2020-04-13T01:24:58.000Z</published>
    <updated>2020-07-12T09:30:58.713Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引语&quot;&gt;&lt;a href=&quot;#引语&quot; class=&quot;headerlink&quot; title=&quot;引语&quot;&gt;&lt;/a&gt;引语&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;鉴于之前axios版本升级，去掉了baseUrl配置的问题，前端对于axios库的升级未做版本固定，导致项目启动报错；除了写成固定版本，还可以自己写一套请求响应机制。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="axios" scheme="https://www.sanks-blog.com/categories/axios/"/>
    
    
      <category term="request" scheme="https://www.sanks-blog.com/tags/request/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS Middleware</title>
    <link href="https://www.sanks-blog.com/NodeJS-Middleware/"/>
    <id>https://www.sanks-blog.com/NodeJS-Middleware/</id>
    <published>2020-02-03T06:59:38.000Z</published>
    <updated>2020-07-12T09:30:58.623Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Nodejs-作为中间层能做的事&quot;&gt;&lt;a href=&quot;#Nodejs-作为中间层能做的事&quot; class=&quot;headerlink&quot; title=&quot;Nodejs 作为中间层能做的事&quot;&gt;&lt;/a&gt;Nodejs 作为中间层能做的事&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;nodejs中间层能减少开发过程中的一些实际问题，比如跨域，也能分担后台开发人员的工作，比如文件上传服务器，也能做简单的即时消息聊天功能，都是基于nodejs的特性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;反向代理和跨域&quot;&gt;&lt;a href=&quot;#反向代理和跨域&quot; class=&quot;headerlink&quot; title=&quot;反向代理和跨域&quot;&gt;&lt;/a&gt;反向代理和跨域&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;同源策略（SOP）是为了防止CSRF（跨域请求伪造）的攻击，浏览器引入的策略。&lt;br&gt;&lt;img src=&quot;/NodeJS-Middleware/sop.png&quot; alt=&quot;同源策略&quot; title=&quot;同源策略&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="https://www.sanks-blog.com/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="https://www.sanks-blog.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Flutter</title>
    <link href="https://www.sanks-blog.com/Flutter/"/>
    <id>https://www.sanks-blog.com/Flutter/</id>
    <published>2020-02-01T07:53:14.000Z</published>
    <updated>2020-07-29T13:43:17.859Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引语&quot;&gt;&lt;a href=&quot;#引语&quot; class=&quot;headerlink&quot; title=&quot;引语&quot;&gt;&lt;/a&gt;引语&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Flutter 是 Google 研发的 移动 UI 框架，可以快速在iOS和Android上构建高质量的原生用户界面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Dart&quot;&gt;&lt;a href=&quot;#Dart&quot; class=&quot;headerlink&quot; title=&quot;Dart&quot;&gt;&lt;/a&gt;Dart&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Dart 是 Flutter 的开发语言， 如同 IOS开发用 swift 一样, &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Flutter-SDK&quot;&gt;&lt;a href=&quot;#Flutter-SDK&quot; class=&quot;headerlink&quot; title=&quot;Flutter SDK&quot;&gt;&lt;/a&gt;Flutter SDK&lt;/h2&gt;&lt;blockquote&gt;&lt;h3 id=&quot;Flutter-SDK里面有什么？&quot;&gt;&lt;a href=&quot;#Flutter-SDK里面有什么？&quot; class=&quot;headerlink&quot; title=&quot;Flutter SDK里面有什么？&quot;&gt;&lt;/a&gt;Flutter SDK里面有什么？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;深度优化了的、移动优先的2D渲染引擎&lt;/li&gt;
&lt;li&gt;现代、响应式框架&lt;/li&gt;
&lt;li&gt;丰富的Android和iOS套件&lt;/li&gt;
&lt;li&gt;单元和集成测试的API&lt;/li&gt;
&lt;li&gt;连接到系统和第三方SDK的Interop和插件API&lt;/li&gt;
&lt;li&gt;无头的测试运行器，用于在Windows、Linux和Mac上运行测试&lt;/li&gt;
&lt;li&gt;用于创建、构建、测试和编译应用程序的命令行工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Flutter" scheme="https://www.sanks-blog.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://www.sanks-blog.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Mutiple SSH keys for diffrent github accounts</title>
    <link href="https://www.sanks-blog.com/Mutiple-SSH-keys-for-diffrent-github-accounts/"/>
    <id>https://www.sanks-blog.com/Mutiple-SSH-keys-for-diffrent-github-accounts/</id>
    <published>2020-01-05T12:01:31.000Z</published>
    <updated>2020-12-27T14:31:17.192Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;create-different-public-key&quot;&gt;&lt;a href=&quot;#create-different-public-key&quot; class=&quot;headerlink&quot; title=&quot;create different public key&quot;&gt;&lt;/a&gt;create different public key&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style=&quot;color: #fe2c23&quot;&gt;Note: blog’s git configuration is global, others is in your project&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;create-different-ssh-key-according-to-your-need&quot;&gt;&lt;a href=&quot;#create-different-ssh-key-according-to-your-need&quot; class=&quot;headerlink&quot; title=&quot;create different ssh key according to your need&quot;&gt;&lt;/a&gt;create different ssh key according to your need&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh-keygen -t rsa -f ~/.ssh/id_rsa_activehacker -C &amp;quot;jexlab@gmail.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ssh-keygen -t rsa -f ~/.ssh/id_rsa_jexchan -C &amp;quot;jexchan@gmail.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;&lt;p&gt;If your command line has no arguments “-f ~/.ssh/id_rsa_activehacker”, as following&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh-keygen -t rsa -C &amp;quot;&lt;a href=&quot;mailto:jexlab@gmail.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;jexlab@gmail.com&lt;/a&gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ssh-keygen -t rsa -C &amp;quot;&lt;a href=&quot;mailto:jexchan@gmail.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;jexchan@gmail.com&lt;/a&gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行上面那条命令后会让输入一个文件名，用于保存刚才生成的 SSH key 代码，此时需要输入完整的绝对路径，或者只输入文件名，在当前目录生成，生成后移动到指定的.ssh文件夹内，如：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Generating public/private rsa key pair.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Enter file in which to save the key (/c/Users/SKS/.ssh/id_rsa): /c/Users/SKS/.ssh/id_rsa_activehacker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Git" scheme="https://www.sanks-blog.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.sanks-blog.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>ES6 的新特性</title>
    <link href="https://www.sanks-blog.com/ECMAScript6-New-Features/"/>
    <id>https://www.sanks-blog.com/ECMAScript6-New-Features/</id>
    <published>2019-05-18T10:26:14.000Z</published>
    <updated>2020-07-12T09:30:58.613Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;写这篇文章的目的就是告诉前端的同学们，ES6 已经是前端程序员必不可少的技能之一，后期再追加 Typescript 的新语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;关键字-async-await-的应用&quot;&gt;&lt;a href=&quot;#关键字-async-await-的应用&quot; class=&quot;headerlink&quot; title=&quot;关键字 async/await 的应用&quot;&gt;&lt;/a&gt;关键字 async/await 的应用&lt;/h3&gt;&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;async function 是 Promise 的语法糖封装&lt;/li&gt;
&lt;li&gt;异步编程的终极方案 - 以同步的方式写异步&lt;ul&gt;
&lt;li&gt;await 关键字可以 “暂停” async function 的执行&lt;/li&gt;
&lt;li&gt;await 关键字可以以同步的写法获取 Promise 的执行结果&lt;/li&gt;
&lt;li&gt;try-catch 可以获取 await 所得到的错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个穿越事件循环存在的 function&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.sanks-blog.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.sanks-blog.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>在 react 项目的基础上增加一些配置（typescript支持，webpack别名等）</title>
    <link href="https://www.sanks-blog.com/create-react-app-complex/"/>
    <id>https://www.sanks-blog.com/create-react-app-complex/</id>
    <published>2019-03-12T01:47:05.000Z</published>
    <updated>2020-07-12T09:30:58.663Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;react脚手架并不能直接运用到项目中去，需要改造，自己进行了进一步探索，总结创建项目的心酸历程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;创建项目的流程&quot;&gt;&lt;a href=&quot;#创建项目的流程&quot; class=&quot;headerlink&quot; title=&quot;创建项目的流程&quot;&gt;&lt;/a&gt;创建项目的流程&lt;/h3&gt;&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;npx create-react-app jelly3&lt;br&gt; 备注：你的环境没有全局安装npx，放心，它会自动安装上并执行创建项目的命令&lt;/li&gt;
&lt;li&gt;cd jelly3 切换到自己创建项目根目录下&lt;/li&gt;
&lt;li&gt;yarn eject&lt;/li&gt;
&lt;li&gt;yarn start 启动项目&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="React" scheme="https://www.sanks-blog.com/categories/React/"/>
    
    
      <category term="React" scheme="https://www.sanks-blog.com/tags/React/"/>
    
      <category term="TypeScript" scheme="https://www.sanks-blog.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>react的基础之上进行引入webpack、eslint、babel的框架搭建</title>
    <link href="https://www.sanks-blog.com/create-react-app-simple/"/>
    <id>https://www.sanks-blog.com/create-react-app-simple/</id>
    <published>2019-03-04T07:13:00.000Z</published>
    <updated>2020-07-12T09:30:58.673Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;开始深入研究reactjs，弥补之前的浅尝辄止；一开始自己用官方的项目生成器生成了一个简单的架构，自己从这个简化版逐步加入babel, webpack, eslint 等相关的配置，有兴趣的朋友可以移步 &lt;a href=&quot;https://github.com/SKSSSX/jelly2&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;react的基础之上进行引入webpack、eslint、babel的框架搭建&lt;/a&gt;, 但是你仔细阅读react项目下的 &lt;span style=&quot;color: #fe2c23&quot;&gt;READEME.md&lt;/span&gt;, 你就会发现我绕了远路，其实react提供了 yarn eject 来注入webpack, eslint, label 等相关依赖和配置，可能这就是react给大家提供的 &lt;span style=&quot;color: #fe2c23&quot;&gt;脚手架&lt;/span&gt; 吧&lt;/p&gt;
&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;需要注意的是：这个命令只能执行一次，而且不可逆转。&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;虽说自己饶了远路，但是还是学到些东西的，也温习了一些 webpack，babel 的配置和原理等，想亲自动手，亲自实践的朋友按照如下步骤进行就行，我已经为你们绕过了一些坑&lt;br&gt;比如：babel 升级 6.x 到 7.x, 请参阅 &lt;a href=&quot;https://www.jianshu.com/p/e21d19875fbb&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;babel 7.x 和 webpack 4.x 配置vue项目&lt;/a&gt;, 如果以下步骤有什么不妥之处，欢迎大家给我评论，我会及时修正并回复大家的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="React" scheme="https://www.sanks-blog.com/categories/React/"/>
    
    
      <category term="React" scheme="https://www.sanks-blog.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JS 的深拷贝与浅拷贝</title>
    <link href="https://www.sanks-blog.com/deep-copy-and-shallow-copy-for-JavaScript/"/>
    <id>https://www.sanks-blog.com/deep-copy-and-shallow-copy-for-JavaScript/</id>
    <published>2019-02-24T01:21:09.000Z</published>
    <updated>2020-07-12T09:30:58.700Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;h3 id=&quot;原文链接&quot;&gt;&lt;a href=&quot;#原文链接&quot; class=&quot;headerlink&quot; title=&quot;原文链接&quot;&gt;&lt;/a&gt;原文链接&lt;/h3&gt;&lt;p&gt;作者：ziwei3749&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000012828382&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://segmentfault.com/a/1190000012828382&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;h3 id=&quot;这篇文章的受众&quot;&gt;&lt;a href=&quot;#这篇文章的受众&quot; class=&quot;headerlink&quot; title=&quot;这篇文章的受众&quot;&gt;&lt;/a&gt;这篇文章的受众&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;第一类,业务需要,急需知道如何深拷贝JS对象的开发者。&lt;/li&gt;
&lt;li&gt;第二类,希望扎实JS基础,将来好去面试官前秀操作的好学者。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;写给第一类读者&quot;&gt;&lt;a href=&quot;#写给第一类读者&quot; class=&quot;headerlink&quot; title=&quot;写给第一类读者&quot;&gt;&lt;/a&gt;写给第一类读者&lt;/h3&gt;&lt;p&gt;你只需要一行黑科技代码就可以实现深拷贝&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var copyObj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &amp;apos;ziwei&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arr : [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var targetObj = JSON.parse(JSON.stringify(copyObj))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;&lt;p&gt;此时 copyObj.arr !== targetObj.arr  已经实现了深拷贝&lt;/p&gt;
&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;别着急走,利用window.JSON的方法做深拷贝存在2个缺点:&lt;/p&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;如果你的对象里有函数,函数无法被拷贝下来&lt;/li&gt;
&lt;li&gt;无法拷贝copyObj对象原型链上的属性和方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.sanks-blog.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.sanks-blog.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端工程师成长的痛，你占几条？</title>
    <link href="https://www.sanks-blog.com/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%88%90%E9%95%BF%E7%9A%84%E7%97%9B%EF%BC%8C%E4%BD%A0%E5%8D%A0%E5%87%A0%E6%9D%A1%EF%BC%9F/"/>
    <id>https://www.sanks-blog.com/前端工程师成长的痛，你占几条？/</id>
    <published>2019-02-23T01:48:01.000Z</published>
    <updated>2020-07-12T09:30:58.731Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原文链接&quot;&gt;&lt;a href=&quot;#原文链接&quot; class=&quot;headerlink&quot; title=&quot;原文链接&quot;&gt;&lt;/a&gt;原文链接&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;作者：真传X&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;amp;mid=2651555898&amp;amp;idx=1&amp;amp;sn=1a523de9728c65c03bc851620a06240e&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;amp;mid=2651555898&amp;amp;idx=1&amp;amp;sn=1a523de9728c65c03bc851620a06240e&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;对于很多前端工程师，很容易进入&lt;span style=&quot;color: #fe2c23&quot;&gt;工作的舒适区&lt;/span&gt;，该熟悉的业务已熟悉了，然后就是重复用轮子，这样很容易让自己的成长处于&lt;span style=&quot;color: #fe2c23&quot;&gt;原地打转&lt;/span&gt;以及&lt;span style=&quot;color: #fe2c23&quot;&gt;低水平重复&lt;/span&gt;的状态。&lt;/p&gt;
&lt;p&gt;去年11月，我们累计交流了203人（1-3年的前端工程师，遇到职业瓶颈），有的是&lt;span style=&quot;color: #fe2c23&quot;&gt;主观原因&lt;/span&gt;造成的 ，有的是&lt;span style=&quot;color: #fe2c23&quot;&gt;客观原因&lt;/span&gt;造成的，本文从客观跟主观两方面进行了总结，帮助大家 &lt;span style=&quot;color: #fe2c23&quot;&gt;自检&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/前端工程师成长的痛，你占几条？/pie.png&quot; alt=&quot;前端工程师专业分布&quot; title=&quot;前端工程师专业分布&quot;&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://www.sanks-blog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.sanks-blog.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-主题文件夹上传不到自己的github上</title>
    <link href="https://www.sanks-blog.com/Hexo-%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8A%E4%BC%A0%E4%B8%8D%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84github%E4%B8%8A/"/>
    <id>https://www.sanks-blog.com/Hexo-主题文件夹上传不到自己的github上/</id>
    <published>2019-02-10T06:44:49.000Z</published>
    <updated>2020-07-12T09:30:58.617Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;好多人都已经用Hexo博客框架搭建了自己的博客，而且也部署到了自己的github上（或者是自己的云服务器上），再简单购买一个域名，让别人也可浏览自己的博客。&lt;br&gt;但是搭建过程中遇到了好多坑，自己的博客代码上传至自己的github上，但是发现&lt;strong&gt;除了主题文件夹下的文件，其他都 &lt;code&gt;push&lt;/code&gt; 上去了&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/Hexo-主题文件夹上传不到自己的github上/github.png&quot; alt=&quot;主题文件夹是空的&quot; title=&quot;主题文件夹是空的&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;而自己本地的主题文件夹是有文件的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/Hexo-主题文件夹上传不到自己的github上/local.png&quot; alt=&quot;本地主题&quot; title=&quot;本地主题&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;探索&quot;&gt;&lt;a href=&quot;#探索&quot; class=&quot;headerlink&quot; title=&quot;探索&quot;&gt;&lt;/a&gt;探索&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;大家可能想到是因为.gitignore里面忽略了这两个文件夹下的所有文件，但是经过自己的检查，发现并不是这儿的问题，自己的项目的.gitignore内容如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/Hexo-主题文件夹上传不到自己的github上/gitignore.png&quot; alt=&quot;.gitignore内容&quot; title=&quot;.gitignore内容&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.sanks-blog.com/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="https://www.sanks-blog.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 插入图片</title>
    <link href="https://www.sanks-blog.com/Hexo-%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>https://www.sanks-blog.com/Hexo-插入图片/</id>
    <published>2019-02-09T06:13:18.000Z</published>
    <updated>2021-11-05T14:38:15.558Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;图片资源放在本地 source/ 文件夹后，本地服务器浏览时图片正常显示，但部署到 github 上会找不到图片。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;究其原因，是图片路径出现问题。开始时自己在 source/ 文件夹下建了 assets 文件夹，专门用于存放文章相关的图片：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |- _posts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |- assets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        |- images&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |- image-1.png&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;&lt;p&gt;使用 markdown 引用图片的方式为&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;![hexo image](../../assets/images/image-1.png)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;&lt;p&gt;查看结构，发现部署以后，图片会自动添加日期相关的文件结构目录：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;img src=&quot;/Hexo-插入图片/hexo-1.png&quot; alt=&quot;This is an example image&quot; title=&quot;This is an example image&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;而实际存放的目录是 &lt;a href=&quot;http://www.sanks-blog.com/assets/images/image-1.png&quot;&gt;http://www.sanks-blog.com/assets/images/image-1.png&lt;/a&gt; ，导致图片资源访问不到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;为了解决这个问题查了很多资料，才知道原来除了本地存放图片，还可以使用图床。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.sanks-blog.com/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="https://www.sanks-blog.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>vue指令中寻找元素parentNode为null的问题（指令中钩子函数的运用）</title>
    <link href="https://www.sanks-blog.com/vue%E6%8C%87%E4%BB%A4%E4%B8%AD%E5%AF%BB%E6%89%BE%E5%85%83%E7%B4%A0parentNode%E4%B8%BAnull%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E6%8C%87%E4%BB%A4%E4%B8%AD%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%90%E7%94%A8%EF%BC%89/"/>
    <id>https://www.sanks-blog.com/vue指令中寻找元素parentNode为null的问题（指令中钩子函数的运用）/</id>
    <published>2019-01-23T04:20:59.000Z</published>
    <updated>2020-07-12T09:30:58.724Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引语&quot;&gt;&lt;a href=&quot;#引语&quot; class=&quot;headerlink&quot; title=&quot;引语&quot;&gt;&lt;/a&gt;引语&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;在VUE中运用 VUE 指令，发现之前的写法存在问题，刷新页面后报错，先贴代码， 再看报错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 权限指令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vue.directive(&lt;span class=&quot;string&quot;&gt;&#39;has&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bind: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;el, binding&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (el.parentNode &amp;amp;&amp;amp; !Vue.prototype.$_has(binding.value)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            el.parentNode.removeChild(el)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;&lt;p&gt;只要刷新页面会出现如下问题：&lt;br&gt;&lt;img src=&quot;/vue指令中寻找元素parentNode为null的问题（指令中钩子函数的运用）/null-error.png&quot; alt=&quot;刷新页面报错展示&quot; title=&quot;刷新页面报错&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://www.sanks-blog.com/categories/Vue/"/>
    
    
      <category term="vue" scheme="https://www.sanks-blog.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Axios 执行多个并发请求(使用Promise解决多层异步调用)</title>
    <link href="https://www.sanks-blog.com/Axios-%E6%89%A7%E8%A1%8C%E5%A4%9A%E4%B8%AA%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82-promise/"/>
    <id>https://www.sanks-blog.com/Axios-执行多个并发请求-promise/</id>
    <published>2018-12-18T00:21:43.000Z</published>
    <updated>2020-07-12T09:30:58.607Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引语&quot;&gt;&lt;a href=&quot;#引语&quot; class=&quot;headerlink&quot; title=&quot;引语&quot;&gt;&lt;/a&gt;引语&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;场景：工作中遇到一个数据接口同时依赖于另外两个接口的情况,&lt;br&gt;需要两个接口返回的数据才能实现进一步操作，下面介绍 3 种方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;首先普及一下promise的一些冷门知识&quot;&gt;&lt;a href=&quot;#首先普及一下promise的一些冷门知识&quot; class=&quot;headerlink&quot; title=&quot;首先普及一下promise的一些冷门知识&quot;&gt;&lt;/a&gt;首先普及一下promise的一些冷门知识&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;执行 then 和 catch 会返回一个新的 Promise ，该 Promise 最终状态根据 then 和 catch 的回调函数的执行结果决定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果回调函数最终是 throw ， 该 Promise 是 rejected 状态&lt;/li&gt;
&lt;li&gt;如果回调函数最终是 return ， 该 Promise 是 resolved 状态&lt;/li&gt;
&lt;li&gt;但如果回调函数最终 return 了一个 Promise ， 该 Promise 会和回调函数的 reurn 的状态保持一致 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;利用js回调嵌套的方式&quot;&gt;&lt;a href=&quot;#利用js回调嵌套的方式&quot; class=&quot;headerlink&quot; title=&quot;利用js回调嵌套的方式&quot;&gt;&lt;/a&gt;利用js回调嵌套的方式&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 异步接口1: 科室列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getDepartmentsList&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;callback&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//模拟实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; departmentList = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random()*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        callback(departmentList)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random()*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 异步接口2: 级别列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getLevelList&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;callback&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//模拟实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; levelList = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random()*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)+&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        callback(levelList)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random()*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//异步接口，列表中科室和级别码转换成对应的中文，需要前两个接口的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;registrationList&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;departmentList,levelList,callback&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//模拟实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; percent = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(departmentList/levelList*&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        callback(percent)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random()*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Promise" scheme="https://www.sanks-blog.com/categories/Promise/"/>
    
    
      <category term="promise" scheme="https://www.sanks-blog.com/tags/promise/"/>
    
      <category term="axios" scheme="https://www.sanks-blog.com/tags/axios/"/>
    
      <category term="ES6" scheme="https://www.sanks-blog.com/tags/ES6/"/>
    
      <category term="回调地狱" scheme="https://www.sanks-blog.com/tags/%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1/"/>
    
  </entry>
  
</feed>
